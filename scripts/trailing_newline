#!/usr/bin/env python3
# Copyright (C) 2024 EmbeddedSolutions.pl

import sys
import os
import logging
import traceback
from pathlib import Path

logger = logging.getLogger(__name__)


def check_trailing_newline(file):
    file.seek(0, os.SEEK_END)
    file_size = file.tell()

    if file_size == 0:
        raise Exception("File is empty")
        return False

    file.seek(file_size - 1, os.SEEK_SET)
    while file.read(1) != b"\n" and file.tell() > 0:
        file.seek(-2, os.SEEK_CUR)

    last_line = file.readline().strip()
    if last_line != b"":
        return False

    file.seek(-2, os.SEEK_CUR)
    while file.tell() > 0:
        current_position = file.tell()
        current_char = file.read(1)

        if current_char == b"\n":
            before_last_line = file.readline().strip()
            if before_last_line == b"":
                raise Exception("Duplicated trailing newline")
            return True
        else:
            # Move back one more character
            file.seek(-2, os.SEEK_CUR)

    return True


def check(path):
    path = Path(path)

    with path.open("rb") as file:
        if "schematic" in str(path).lower():
            return
        if "managed_components" in str(path).lower():
            return
        if path.suffix == "dependencies.lock":
            return
        if path.suffix == ".jpg" or path.suffix == ".png":
            return
        if path.suffix == ".c" or path.suffix == ".h":
            # clang-format will take care of this
            return

        found = check_trailing_newline(file)
        if not found:
            raise Exception(f"Missing trailing newline")


if __name__ == "__main__":
    logging.basicConfig(level=os.getenv("LOG_LEVEL", "INFO").upper())

    try:
        path = sys.argv[1]
        check(path)
    except Exception as e:
        logger.error(f"{path}: {e}")
        logger.debug(traceback.format_exc())
        sys.exit(1)
